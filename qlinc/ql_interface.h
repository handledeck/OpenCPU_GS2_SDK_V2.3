/*==========================================================================
 |               Quectel OpenCPU --  User API
 |
 |              Copyright (c) 2010 Quectel Ltd.
 |
 |--------------------------------------------------------------------------
 | File Description
 | ----------------
 |      Definitions for some system APIs.
 |
 |--------------------------------------------------------------------------
 |
 |  Designed by     :   Jay XIN
 |  Coded    by     :   Jay XIN
 |  Tested   by     :   Stanley YONG
 |
 \=========================================================================*/

#ifndef __QL_INTERFACE_H__
#define __QL_INTERFACE_H__
#include "ql_appinit.h"
#include "ql_type.h"
#include "ql_memory.h"
#include "ql_api_type.h"
#include "ql_utility.h"

typedef struct
{
    u16 mcc;
    u16 mnc;
    u16 lac;
    u16 cellId;
    u16 bcch;
    u8  bsic;
    s16 dbm;
    s8  c1;
    s8  c2;
    s16 txp;
    s16 rla;
}QL_STNodeB_Info;

typedef enum
{
    SM_Disable = 0,
    SM_Enable  = 1
}QL_SleepMode;

typedef enum
{
    UNKNOWN = 0,
    SIM_CARD_STATE_IND,
    GSM_NW_STATE_IND,
    GPRS_NW_STATE_IND,
    CHARGING_NORMAL,
    THOST_TO_NORMAL,
    UNDER_VOLTAGE_WARNING,
    OVER_VOLTAGE_WARNING,
    UNDER_VOLTAGE_PWRDOWN,
    OVER_VOLTAGE_PWRDOWN,
    SYS_INIT_STATE_IND,
    CFUN_IND
}Ql_URC_Type;

typedef enum
{
    SYS_STATE_START = 0,
    SYS_STATE_ATOK  = 1,
    SYS_STATE_PHBOK = 2,
    SYS_STATE_SMSOK = 3
}Ql_Sys_InitState;

typedef struct QlCHINFOTag
{
    u8  rr_state;//RR state:
                 // 0   null state
                 // 1   inactive state
                 // 2   cell select state
                 // 3   idle state
                 // 4   access state
                 // 5   packet transfer state
                 // 6   dedicated state
                 // 7   cell reselect state
    u16 arfcn;   //Absolute Radio Frequency Channel Number 
    s8  dbm;     //Receiving level in dBm
    u8  ch_type; //Channel type
    u8  ta;      //Timing Advance, the value 255 is unavailable
    u8  rxq_sub; //Receiving quality(sub), range is 0-7, the same as the parameter of QENG
    u8  rxq_full;//Receiving quality(full), range is 0-7, the same as the parameter of QENG
}QlCHINFO;


typedef struct
{
    s32  longitude;     // unit in (degree*1000000)
    s32  latitude;      // unit in (degree*1000000)
    s32  accuracy;      // unit in metre
    u8   dt[30];        // date,and UTC time, format: yyyy/mm/dd,hh/mm/ss
    u8   addr[200];     // address information
    s32  reserved;      // reserved field
}QlModuleLocInfo ;

typedef struct
{
    s32 id;
    s32 lac;
    s32 mnc;
    s32 mcc;
    s32 ssi;
    s32 ta ;
}QlGsmCell;

typedef enum{
    REQ_GSM_NONE = 0,
    REQ_GSM_TIME_FMT1,  // Date and UTC time, format ex.: 2012/08/07,02:10:17
    REQ_GSM_TIME_FMT2,  // Week, date and UTC time, format ex.: Tue, 07 Aug 2012 02:04:24 GMT
    REQ_GSM_LOC_TIME,   // Location, date and UTC time, format ex.: 121.392285,31.164563,2012/08/07,02:05:50
    REQ_GSM_LOC_ADDR,   // Location, date, UTC time and address, format ex.: 121.392285,31.164563,2012/08/07,02:08:37,{"country":"China","country_code":"CN","region":"Shanghai","city":"Shanghai","street":"Tianlin Rd","street_number":""}
    REQ_GSM_MULTICELL_NOADDR,  // Same to 'REQ_GSM_LOC_TIME', but it's generated by information of cells
    REQ_GSM_MULTICELL_ADDR,    // Same to 'REQ_GSM_LOC_ADDR', but it's generated by information of cells
    REQ_GSM_LOC_BYCOOR,        // Get address by coordinate
    REQ_GSM_END
}QlGsmOpType;

typedef struct
{
    QlGsmOpType op_type;
    s32 wait_time; // in second, 60s by default
    QlGsmCell cell;
} QlLocParam;

typedef void (*OCPU_CB_QENG)(QL_STNodeB_Info* bsInfo);
typedef void (*Ql_CallBack_JDC)(s32 result);

/*****************************************************************
* Function:     OCPU_SecureData_CB 
* 
* Description:
*              The callback function  to identify Ql_SecureData_Store
*              /Ql_SecureData_Read of the executing result.
* Parameters:
*              result:
*                   [out] the result code, 1 means Ql_SecureData_Store
*                   /Ql_SecureData_Read function succeeds, and -1 means failure.
*
*               pData:
*                   [out] For Ql_SecureData_Store, the parameter is always NULL.
*                   For Ql_SecureData_Read, this parameter is pointer to 
*                   the read data. if the result is -1, this parameter will be NULL.
*
*               len:
*                   [out] the length of data that really write or read.
* Return:        
*               None.
*****************************************************************/
typedef void (*OCPU_SecureData_CB)(s8 result, u8* pData, u32 len);

/*****************************************************************
* Function:     Ql_Sleep
*
* Description:
*               Suspends the execution of the current task
*               until the time-out interval elapses.
* Parameters:
*               msec:
*                   The time interval for which execution is to
*                   be suspended, in milliseconds.
* Return:
*               None
*****************************************************************/
void Ql_Sleep(u32 msec);


/*****************************************************************
* Function:     Ql_osGetCurrentTaskPriority
*
* Description:
*               This function gets system EVENTs from Core System.
*               When there is no event in customer task's event queue,
*               the task will go into waiting state.
* Parameters:
*               signal_p:
*                   Pointer to QlEventBuffer structure, which contains
*                   Event Type and Event Data.
* Return:
*               None
*****************************************************************/
void Ql_GetEvent(QlEventBuffer  *signal_p);


/*****************************************************************
* Function:     Ql_Reset
*
* Description:
*               This function resets the system.
*
* Parameters:
*               resettype:
*                   must be 0.
* Return:
*               None
*****************************************************************/
void Ql_Reset(u8 resettype);


/*****************************************************************
* Function:     Ql_PowerDown
*
* Description:
*               This function switches off the power supply to 
*               module.
* Parameters:
*               powertype:
*                   Action types of this function.
*                    0 = Urgently power off
*                    1 = Normally power off
* Return:
*               None
*****************************************************************/
void Ql_PowerDown(u8 powertype);


/*****************************************************************
* Function:     Ql_PowerOnAck
*
* Description:
*
* Parameters:
*               None
* Return:
*               None
*****************************************************************/
void Ql_PowerOnAck(void);


/*****************************************************************
* Function:     Ql_StartWatchdog
*
* Description:
*               This function starts watch-dog service.
*               If not call Ql_FeedWatchdog within
*               90 times*(200*10ms)=180000ms=3 minutes,
*               the module will automatically power down.
* Parameters:
*               tick10ms:
*                   Counter which counts by step 1 every 10ms.
*
*               overfeedcount:
*                   Counter threshold.
*                   The module will restart when the counter's value
*                   is over this threshold.
*
*               resettype:
*                   0 = WDT_RESET
*
*               Example:
*                   Ql_StartWatchdog(200,  90, 1);
* Return:
*               TRUE indicates suceess in starting watch dog service.
*               FALSE indicates failure.
*****************************************************************/
bool Ql_StartWatchdog(u16 tick10ms, u32 overfeedcount, u16 resettype);


/*****************************************************************
* Function:     Ql_FeedWatchdog
*
* Description:
*               Calling this function will reset watch-dog.
*               If not call Ql_FeedWatchdog within
*               90 times*(200*10ms)=180000ms=3 minutes,
*               the module will automatically power down.
* Parameters:
*               None
* Return:
*               None
*****************************************************************/
void Ql_FeedWatchdog(void);


/*****************************************************************
* Function:     Ql_StopWatchdog
*
* Description:
*               Stop the watch-dog, which was started previously.
*
* Parameters:
*               None
* Return:
*               None
*****************************************************************/
void Ql_StopWatchdog(void);


/*****************************************************************
* Function:     Ql_ReadModuleUID
*
* Description:
*               Get the module UID.
*
* Parameters:
*               uid_buf:
*                   Pointer to the buffer to store the uid.
*                   Need 20 bytes length of buffer.
* Return:        
*               If the uid_buf is null, this function will return
*               QL_RET_ERR_INVALID_PARAMETER.
*               If this function read the uid successfully, the length
*               of UID will be returned.
*****************************************************************/
s32 Ql_ReadModuleUID(u16* uid_buf);


/*****************************************************************
* Function:     Ql_GetCoreVer
*
* Description:
*               Get the version ID of the core.
*
* Parameters:
*               ptr_ver:
*                   [out] Pointer to a unsigned char, which is
*                           the the version ID of the core.
*               len:
*                   [in] It must be equal or greater than the length of version ID.
*                         Otherwise error code will be returned.
* Return:
*               The length of version ID indicates success.
*               Negative indicates failure. please see Error Code Definition.
*****************************************************************/
s32  Ql_GetCoreVer(u8* ptr_ver, u16 len);


/*****************************************************************
* Function:     Ql_GetSDKVer
*
* Description:
*               Get the version ID of the SDK.
*
* Parameters:
*               ptr_ver:
*                   [out] Pointer to a unsigned char, which is
*                           the the version ID of the SDK.
*               len:
*                   [in] A number will be compare with the length of version ID.
*
* Return:
*               The smaller between len and the length of version ID.
*****************************************************************/
s32  Ql_GetSDKVer(u8* ptr_ver, u16 len);


/*****************************************************************
* Function:     Ql_GetPowerOnReason
*
* Description:
*               Get Power on Reason.
*
* Parameters:
*               cause point to the data which indicate the reason of the Power on
*       	        PWRKEYPWRON = 0,
*	                CHRPWRON	= 1,
*	                RTCPWRON = 2,
*	                CHRPWROFF = 3,
*	                WDTRESET = 4,
*	                ABNRESET = 5,
*	                USBPWRON = 6,
*	                USBPWRON_WDT = 7,
*	                PRECHRPWRON = 8,
*	                HWSYSRST = 9,
*	                UNKNOWN_PWRON = 0xF9
*
* Return:
*               None
*****************************************************************/
void Ql_GetPowerOnReason(u8* cause);


/*****************************************************************
* Function:     Ql_GetDeviceCurrentRunState
*
* Description:
*               This function retrieves the current run-state,
*               including SIM card state, network registion state,
*               GPRS network registion state, signal strength and
*               bit error rate.
*
* Parameters:
*               simcard:
*                   [out] SIM card state, a value of Ql_SIM_State.
*
*               creg:
*                   [out] Network registion state, a value of Ql_Reg_State.
*
*               cgreg:
*                   [out] GPRS Network registion state, a value of Ql_Reg_State.
*
*               rssi:
*                   [out] Signal strength, unit in dBm.
*
*               ber:
*                   [out] Bit error rate.
*
* Return:
*               None.
*****************************************************************/
void   Ql_GetDeviceCurrentRunState(s32 * simcard,
                                             s32 * creg,
                                             s32 * cgreg,
                                             u8  * rssi,
                                             u8  * ber);


/******************************************************************************
* Function:     Ql_IsSIMInserted
*
* Description:
*               This function detects if SIM Card is inserted or not.
*
* Parameters:
*               None.
*
* Return:
*               1 indicate SIM Card is inserted and 0 is not.
******************************************************************************/
bool Ql_IsSIMInserted(void);


/******************************************************************************
* Function:     Ql_GSM_GetIMEI
*
* Description:
*               This function gets the IMEI(International Mobile Equipment Identity) of GSM.
*
* Parameters:
*               ptr_imei:
*                   [out] A pointer to the IMEI buffer.
*               len:
*                   [in] It must be equal or greater than the length of version ID.
*                         Otherwise error code will be returned.
*
* Return:
*               QL_RET_OK indicates success.
*               Negative indicates failure. please see Error Code Definition.
******************************************************************************/
s32 Ql_GSM_GetIMEI(u8* ptr_imei, u16 len);

/******************************************************************************
* Function:     Ql_GetOperator
*
* Description:
*               Get the current operator name.
*
* Parameters:
*               opr_str:
*                  [out] A pointer to the operator names buffer.
*               len:
*                  [in] The lenth of the operator names buffer.
* Return:
*               QL_RET_OK indicates success.
*               Negative indicates failure. please see Error Code Definition.
******************************************************************************/
s32 Ql_GetOperator(u8* opr_str, u8 len);

/******************************************************************************
* Function:     Ql_RetrieveNodeBInfo
*
* Description:
*               Get base station Info.
*
* Parameters:
*               callback_bsInfo:
*                     A pointer to callback function.
* Return:
*               QL_RET_OK indicates success.
*               Negative indicates failure. please see Error Code Definition.
******************************************************************************/
s32 Ql_RetrieveNodeBInfo(OCPU_CB_QENG callback_bsInfo);

/*****************************************************************
* Function:     Ql_SetSleepMode 
* 
* Description:
*               Set enable of sleep mode.
*
* Parameters:
*               mod: one value of QL_SleepMode
*                   0, disable
*                   1, enable
*
* Return:        
*               QL_RET_OK indicates this function successes.
*               Negative indicates failure. please see Error Code Definition.
*****************************************************************/
s32 Ql_SetSleepMode(u8 mod);

/*****************************************************************
* Function:     Ql_SetCFUN 
* 
* Description:
*               Switch cfun state to 0/1/4.
*
* Parameters:
*               cfun_type: 0/1/4
*
*               cfun_callback:
*                   callback function for cfun switch action.
*
* Return:        
*               QL_RET_OK, indicates this function successes.
*               QL_RET_ERR_INVALID_PARAMETER, indicates the wrong input parameter.
*               QL_RET_ERR_GENERAL_FAILURE, fails to switch cfun state.
*****************************************************************/
s32 Ql_SetCFUN(u8 cfun_type, OCPU_CB_SGL_REP cfun_callback);

/*****************************************************************
* Function:     Ql_GetCFUN 
* 
* Description:
*              get cfun value
*
* Parameters:
*               none
*
* Return:        
*               cfun state value(0/1/4).
*
*Author: 20120524 Ramos.Zhang
*****************************************************************/
s32 Ql_GetCFUN(void);

/*****************************************************************
* Function:     Ql_GetPowerSupply 
* 
* Description:
*               This function queries the battery balance, voltage
*               and the charging status.
*
* Parameters:
*               [out]charge_stat:   charging state, 0=uncharged status, 
*                                                   1=charging, 
*                                                   2=charging completes
*
*               [out]capacity:      battery balance, a percent
*
*               [out]voltage:       battery voltage, unit in mV
*
*               cfun_callback:
*                   callback function for cfun switch action.
* Return:        
*               QL_RET_OK, indicates this function successes.
*               QL_RET_ERR_INVALID_PARAMETER, indicates the wrong input parameter.
*               QL_RET_ERR_GENERAL_FAILURE, fails to get the info of power supply.
*****************************************************************/
s32 Ql_GetPowerSupply(/*[out]*/u8* charge_stat, // charging state
                               /*[out]*/u32* capacity,   // battery balance
                               /*[out]*/u32* voltage     // battery voltage
                              );

/*****************************************************************
* Function:     Ql_VoltageInd_Init 
* 
* Description:
*               Register the callback for voltage indication.
*               the callback function will be triggered when the power
*               supply to module exceeds the limitation (3.4v-4.5v, 
*               and not include the boundary).
*
* Parameters:
*               volInd_callback:
*                   callback function for voltage indication.
*
* Return:        
*               QL_RET_OK indicates this function successes.
*               QL_RET_ERR_INVALID_PARAMETER, indicates the wrong input parameter.
*****************************************************************/
s32 Ql_VoltageInd_Init(OCPU_CB_VOL_IND volInd_callback);

/*****************************************************************
* Function:     Ql_PwrKey_Init 
* 
* Description:
*               Register the callback for PWRKEY indication.
*               the callback function will be triggered when the power
*               KEY pressed down or release.
*
* Parameters:
*               pwrKey_callback:
*                   callback function for PWRKEY indication.
*
* Return:        
*               QL_RET_OK indicates this function successes.
*               QL_RET_ERR_INVALID_PARAMETER, indicates the wrong input parameter.
*
*Author: 20120509 Ramos.Zhang
*****************************************************************/

s32 Ql_PwrKey_Init(OCPU_CB_PWRKEY_IND pwrKey_callback);

/*****************************************************************
* Function:     Ql_GenericURC_Init 
* 
* Description:
*               Register the callback for some generic URC, such as
*               'Call Ready', 'SIM NOT INSERTED'.
*               the callback function will be triggered when the 
*               generic URC related event happens. 
*
* Parameters:
*               urc_callback:
*                   callback function for generic URC.
                    Note:  don't put too much jobs in this callback.
*
* Return:        
*               QL_RET_OK indicates this function successes.
*               QL_RET_ERR_INVALID_PARAMETER, indicates the wrong input parameter.
*****************************************************************/
s32 Ql_GenericURC_Init(OCPU_CB_GENERIC_URC urc_callback);

/*****************************************************************
* Function:     Ql_GetCHINFO 
* 
* Description:
*               Get Channel Information
*
* Parameters:
*                [out] Pointer to the QlCHINFO object
*
* Return:        
*               QL_RET_OK, indicates this function successes., otherwise FALSE
*               QL_RET_ERR_PARAM, indicates the input parameter is NULL.
*Author: 20120530 ablaze.lu
*****************************************************************/
s32 Ql_GetCHINFO(QlCHINFO *CHINFO);

/*****************************************************************
* Function:     Ql_StartJammingDet 
* 
* Description:
*               Start Jamming Detection 
*
* Parameters:
*               callback_jdc:      A pointer to callback result
*                               
*
* Return:        
*               QL_RET_OK indicates this function successes.
*               QL_RET_ERR_PARAM, indicates the input parameter is NULL.
*              
*Author: 20120725 ablaze.lu
*****************************************************************/
s32 Ql_StartJammingDet (Ql_CallBack_JDC callback_jdc);

/*****************************************************************
* Function:     Ql_StopJammingDet 
* 
* Description:
*               Stop Jamming Detection 
*
* Parameters:
*                               
*
* Return:        
*               Always return QL_RET_OK.
*              
*Author: 20120725 ablaze.lu
*****************************************************************/
s32 Ql_StopJammingDet (void);

/*****************************************************************
* Function:     Ql_ChangeUsbMode 
* 
* Description:
*              This functin changes the usb working mode (as COM or MS).
*              New working mode takes effect only after next rebooting module.
*              To reboot module, you can call Ql_Reset(0).
* Parameters:
*              usb_mod:
*               [in]  one value of 'QlUsbMode'.
*                     if the value is USB_NORMAL, the setting for QlCustomerConfig.usb_mode will be adopted.
* Return:        
*               QL_RET_OK, suceess
*
*               QL_RET_ERR_PARAM, invalid paramter
*****************************************************************/
s32 Ql_ChangeUsbMode(QlUsbMode usb_mod); 

/*****************************************************************
* Function:     Ql_SecureData_Store 
* 
* Description:
*              This function can be used to store some critical user data 
*              to prevent them from losing.
*
*              Note:
*              1.
*              OpenCPU has designed 14 blocks of system storage space to 
*              backup critical user data. Developer may specify the first
*              parameter index [1-14] to specify different storage block. 
*              Among the storage blocks, 1~8 blocks can store 50 bytes for 
*              each block, 9~12 blocks can store 100 bytes for each block, 
*              and 13~14 blocks can store 500 bytes for each block.
*
*              2.
*              User should not call this API function frequently, which is not
*              good for life cycle of flash.
*
* Parameters:
*              index:
*               [in]  the index of the secure data block. The range is: 1~13.
*              
*               pData: 
*                   [in] The data to be backed up. In 1~8 groups, every group can 
*                   save 50 bytes at most. In 9~12 groups, every group can save 
*                   100 bytes at most. In 13~14 groups, the user data can save 500 bytes at most.
*
*               len:
*                   [in] The length of the user data. When the index is (1~8), 
*                   then len<=50. When the index is (9~12), then len<=100. 
*                   When the index is (13~14), then len<=500.
*
*               callback_result:
*                   [in] Whether the user data is stored successfully.
* Return:        
*               QL_RET_OK, this function succeeds.
*               QL_RET_ERR_PARAM, invalid paramter.
*****************************************************************/
s32 Ql_SecureData_Store(u8 index , u8 *pData, u32 len, OCPU_SecureData_CB callback_WriteResult);

/*****************************************************************
* Function:     Ql_SecureData_Read 
* 
* Description:
*              This functin reads secure data which is previously 
*              stored by Ql_SecureData_Store.
* Parameters:
*               index:
*                   [in] The index of the secure data block. The range is: 1~14.
*
*               len:
*                   [in] The length of the user data. When the index is (1~8), 
*                   then len<=50. When the index is (9~12), then len<=100. 
*                   When the index is (13~14), then len<=500.
*
*               callback_ReadResult:
*                   [in] Whether the secure data has been read successfully,
*                   if YES, return the data.
* Return:        
*               QL_RET_OK, this function succeeds.
*               QL_RET_ERR_PARAM, invalid paramter.
*****************************************************************/
s32 Ql_SecureData_Read(u8 index, u32 len, OCPU_SecureData_CB callback_ReadResult);

#endif  // End-of __QL_INTERFACE_H__

